#include "RainbowTable.hpp"
#include <cstring>
#include <cstdlib>
#include <iostream>
#include "constants.hpp"

// Definitions
void help_displayer();

int main(int argc, const char * argv[]){
    if (argc == 1){
        help_displayer();
	    return 0;
    }

    std::string argv1 = argv[1];

    using clock = std::chrono::system_clock;
    using sec = std::chrono::duration<double>;

    if (argv1 == "G" && argc == 5){
        try{
            const auto before = clock::now();
            RainbowTable rt = 
            RainbowTable(static_cast<int>(strtol(argv[2], NULL, 10)), 
            NUMBER_OF_PASS, static_cast<int>(strtol(argv[3], NULL, 10)));
            const sec duration = clock::now() - before;

            std::cout << "To generate the table, it took : " << duration.count() << "s" << std::endl;
            rt.export_to_file(argv[4]);

        }catch(std::bad_cast& e){
            //std::cerr << e.what() << std::endl;
            help_displayer();
            exit(1);
        }
    }
    
    else if (argv1 == "A" && argc == 4){
        try{
            // argv[2] = file containing the rainbow table
            // argv[3] = file containing the hashes that we want to crack

            const auto before = clock::now();
            RainbowTable rt = RainbowTable(argv[2]);
            rt.attack(argv[3]);
            const sec duration = clock::now() - before;
            std::cout << "The attack took : " << duration.count() << "s" << std::endl;
        }catch(std::bad_cast& e){
            //std::cerr << e.what() << std::endl;
            help_displayer();
            exit(1);
        }
    }

    else if (argv1 == "B" && argc == 5){
        try{
            // argv[4] = file containing the hashes that we want to crack
            const auto before = clock::now();
            RainbowTable rt = 
            RainbowTable(static_cast<int>(strtol(argv[2], NULL, 10)), 
            NUMBER_OF_PASS, static_cast<int>(strtol(argv[3], NULL, 10)));
            std::cout << "Generation is finished, now we attack." << std::endl;
            rt.attack(argv[4]);
            const sec duration = clock::now() - before;
            std::cout << "Both the generation and the attack took : " << duration.count() << "s" << std::endl;
        }catch(std::bad_cast& e){
            //std::cerr << e.what() << std::endl;
            help_displayer();
            exit(1);
        }
    }
    else help_displayer();

    return 0;
}

void help_displayer(){
        std::cout << "#####" << std::endl 
                << "Usage : " << std::endl
                << "#####" << std::endl
                << "1) If you DO NOT already have a rainbow table, generate one with this command : " << std::endl
                << "./rainbow G <n> <l> <rt> \", where"  << std::endl
                << "- G : the letter to tell the program we are in 'Generate' mode," << std::endl
                << "- <n> : the number of passwords to generate," << std::endl
                << "- <l> : the length of the passwords," << std::endl
                << "- <rt> : name of the file where the output rainbow table should be stored" << std::endl
                << "#####" << std::endl
                << "2) If you DO already have a rainbow table, let's crack some passwords with this command : " << std::endl
                << "./rainbow A <rt> <hashes>\", where" << std::endl
                << "- A : the letter to tell the program we are in 'Attack' mode," << std::endl
                << "- <rt>: a binary file generated by the command above" << std::endl
                << "- <hashes>: a plaintext file containing one hash on each line" << std::endl
                << "#####" << std::endl
                << "3) If you want to generate AND crack passwords, type this command : " <<std::endl
                << "./rainbow B <n> <l> <hashes>\"," << std::endl
                << "every parameters refer to the ones from 1) and 2)." << std::endl;
}


